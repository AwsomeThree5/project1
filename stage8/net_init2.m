function [ net ] = net_init2( varargin )
%NET_INIT2 Summary of this function goes here
%   Detailed explanation goes here

h = varargin{1};
w = varargin{2};
c = varargin{3};

opts.networkType = 'simplenn' ;
% opts = vl_argparse(opts, varargin) ;


% same seed always
s = RandStream('mt19937ar','Seed',0);
lr = [.1 2] ;
HH = [7,7,7,7,28];
WW = [7,7,7,7,28];
C = [3,8,32,64,128];
F = [8,32,64,128,2];
weightsScale = 2./sqrt(HH.*WW.*(F+C));
% Define network CIFAR10-quick
net.layers = {} ;

% Block 1


% net.layers{end+1} = struct('type', 'pool', ...
%                            'method', 'max', ...
%                            'pool', [3 3], ...
%                            'stride', 2, ...
%                            'pad', [0 1 0 1]) ;

% Block 2
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{weightsScale(1)*randn(HH(1),WW(1),C(1),F(1), 'single'), zeros(1,F(1),'single')}}, ...
    'learningRate', lr, ...
    'stride', 1, ...
    'pad', 3) ;
net.layers{end+1} = struct('type', 'bnorm', ...
    'weights', {{ones(1,1,C(2), 'single'), zeros(1,C(2),'single')}});
net.layers{end+1} = struct('type', 'relu', 'leak', 0.02) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [3 3], ...
                           'stride', 2, ...
                           'pad', [0 1 0 1]) ;

net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{weightsScale(2)*randn(HH(2),WW(2),C(2),F(2), 'single'), zeros(1,F(2),'single')}}, ...
    'learningRate', lr, ...
    'stride', 1, ...
    'pad', 3) ;
net.layers{end+1} = struct('type', 'bnorm', ...
    'weights', {{ones(1,1,C(3), 'single'), zeros(1,C(3),'single')}});
net.layers{end+1} = struct('type', 'relu', 'leak', 0.02) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [3 3], ...
                           'stride', 2, ...
                           'pad', [0 1 0 1]) ;

net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{weightsScale(3)*randn(HH(3),WW(3),C(3),F(3), 'single'), zeros(1,F(3),'single')}}, ...
    'learningRate', lr, ...
    'stride', 1, ...
    'pad', 3) ;
net.layers{end+1} = struct('type', 'bnorm', ...
    'weights', {{ones(1,1,C(4), 'single'), zeros(1,C(4),'single')}});
net.layers{end+1} = struct('type', 'relu', 'leak', 0.02) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [3 3], ...
                           'stride', 2, ...
                           'pad', [0 1 0 1]) ;
% net.layers{end+1} = struct('type', 'dropout',...
%                             'rate', 0.5);

% Block 5
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{weightsScale(4)*randn(HH(4),WW(4),C(4),F(4), 'single'), zeros(1,F(4),'single')}}, ...
    'learningRate', lr, ...
    'stride', 1, ...
    'pad', 3) ;
net.layers{end+1} = struct('type', 'bnorm', ...
    'weights', {{ones(1,1,C(5), 'single'), zeros(1,C(5),'single')}});
net.layers{end+1} = struct('type', 'relu', 'leak', 0.02) ;

% Block 5
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{weightsScale(5)*randn(HH(5),WW(5),C(5),F(5), 'single'), zeros(1,F(5),'single')}}, ...
    'learningRate', lr, ...
    'stride', 1, ...
    'pad', 0) ;

% Loss layer
net.layers{end+1} = struct('type', 'softmaxloss') ;

% Meta parameters
net.meta.inputSize = [h w c] ;
net.meta.trainOpts.learningRate = 0.02*[0.05*ones(1,3) 0.01*ones(1,5) 0.003*ones(1,13), 0.0005*ones(1,13)] ;
net.meta.trainOpts.weightDecay = 0.0001 ;
net.meta.trainOpts.batchSize = 200; %100
net.meta.trainOpts.numEpochs = numel(net.meta.trainOpts.learningRate) ;

% Fill in default values
net = vl_simplenn_tidy(net) ;

% Switch to DagNN if requested
switch lower(opts.networkType)
    case 'simplenn'
        % done
    case 'dagnn'
        net = dagnn.DagNN.fromSimpleNN(net, 'canonicalNames', true) ;
        net.addLayer('error', dagnn.Loss('loss', 'classerror'), ...
            {'prediction','label'}, 'error') ;
    otherwise
        assert(false) ;
end
end
